// <auto-generated />
#pragma warning disable CS0105
using ConsoleApp.Tables;
using ConsoleApp;
using MessagePack;
using ReactiveMemory.Validation;
using ReactiveMemory;
using System.Buffers;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.IO;
using System.Linq.Expressions;
using System.Linq;
using System.Reflection;
using System.Text;
using System;
using ConsoleApp.Tables;

namespace ConsoleApp
{
   public sealed class DbContext 
   {
		public IMemoryDatabase  Database => _database;
        private MemoryDatabase _database;

        public ITransaction  Transaction => _transaction;
        private Transaction _transaction;

        public bool IsTransactionStarted { get; private set; }

        public DbContext(byte[] dbBytes, IChangesMediatorFactory changesMediatorFactory)
        {
            _database = new  MemoryDatabase (dbBytes, changesMediatorFactory);
        }

        public void BeginTransaction()
        {
            if (IsTransactionStarted)
            {
                throw new InvalidOperationException("Transaction is already started");
            }

            IsTransactionStarted = true;

            // it just cast, but when we make changes it make copy of data, so Database will not be changed
            _transaction = _database.BeginTransaction();
        }


        public void Commit()
        {
            if (!IsTransactionStarted)
            {
                throw new InvalidOperationException("Transaction is not started");
            }

            // cast to  MemoryDatabase 
            _database = _transaction.Commit();

            /* when we want write changes to disk or cast to bytes to for data protection
            // for example, we can compare data from disk and data from memory and if they are not equal ban player
            // serialize changed data to binary
            var bytes = memoryDatabase.ToDatabaseBuilder().Build();
            // create new  MemoryDatabase  from bytes
            _database = new  MemoryDatabase (bytes, maxDegreeOfParallelism: Environment.ProcessorCount);*/

            IsTransactionStarted = false;
        }

        public void Rollback()
        {
            // all changes in Transaction, so we just set it to null to discard changes
            _database.ChangesConveyor.Clear();
            _transaction = null;
            IsTransactionStarted = false;
        }		
   }
}