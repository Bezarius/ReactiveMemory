// <auto-generated />
#pragma warning disable CS0105
using ConsoleApp.Tables;
using ConsoleApp;
using MessagePack;
using ReactiveMemory.Validation;
using ReactiveMemory;
using System.Buffers;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.IO;
using System.Linq.Expressions;
using System.Linq;
using System.Reflection;
using System.Text;
using System;
using ConsoleApp.Tables;

namespace ConsoleApp
{
    public class ReactiveMemoryResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new ReactiveMemoryResolver();

        ReactiveMemoryResolver()
        {

        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.formatter;
        }

        static class FormatterCache<T>
        {
            public static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> formatter;

            static FormatterCache()
            {
                var f = ReactiveMemoryResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class ReactiveMemoryResolverGetFormatterHelper
    {
        static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static ReactiveMemoryResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(7)
            {
                {typeof(EnumKeyTable[]), 0 },
                {typeof(Item[]), 1 },
                {typeof(Monster[]), 2 },
                {typeof(Person[]), 3 },
                {typeof(Quest[]), 4 },
                {typeof(Test1[]), 5 },
                {typeof(Test2[]), 6 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key)) return null;

            switch (key)
            {
                case 0: return new MessagePack.Formatters.ArrayFormatter<EnumKeyTable>();
                case 1: return new MessagePack.Formatters.ArrayFormatter<Item>();
                case 2: return new MessagePack.Formatters.ArrayFormatter<Monster>();
                case 3: return new MessagePack.Formatters.ArrayFormatter<Person>();
                case 4: return new MessagePack.Formatters.ArrayFormatter<Quest>();
                case 5: return new MessagePack.Formatters.ArrayFormatter<Test1>();
                case 6: return new MessagePack.Formatters.ArrayFormatter<Test2>();
                default: return null;
            }
        }
    }
}