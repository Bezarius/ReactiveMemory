// <auto-generated />
#pragma warning disable CS0105
using LiteDB;
using MessagePack;
using ReactiveMemory.Validation;
using ReactiveMemory;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System;
using TestPerfLiteDB;
using Benchmark.Tables;

namespace Benchmark
{
   public interface ITransaction
   {
        public void ReplaceAll(System.Collections.Generic.IList<TestDoc> data);
        public void RemoveTestDoc(int key);
        public void RemoveTestDoc(int[] keys);
        public void Diff(TestDoc addOrReplaceData);
        public void Diff(TestDoc[] addOrReplaceData);
   }

   public sealed class Transaction : TransactionBase, ITransaction
   {

        public MemoryDatabase Database
        {
            get
            {
                if(_rebuildIsNeeded)
                {
                    Commit();
                }
                return memory;
            }
        }

        private MemoryDatabase memory;

        private IChangesQueue<TestDoc> _TestDocChangeTracker;
 

        private TestDoc[] _TestDocChanges;
 

        private bool _rebuildIsNeeded;

        public Transaction(MemoryDatabase memory)
        {
            this.memory = memory;
            _TestDocChangeTracker = this.memory.ChangesConveyor.GetQueue<TestDoc>();
 
        }

        public MemoryDatabase Commit()
        {
            if(!_rebuildIsNeeded)
            {
                return memory;
            }
            TestDocTable TestDocTable;
            if(_TestDocChanges != null)
            {
                TestDocTable = new TestDocTable(CloneAndSortBy(_TestDocChanges, x => x.id, System.Collections.Generic.Comparer<int>.Default));
                _TestDocChanges = null;
            }
            else
            {
                TestDocTable = memory.TestDocTable;
            }
 
            memory = new MemoryDatabase(
                TestDocTable,
 
                memory.ChangesConveyor             
            );
            _rebuildIsNeeded = false;
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<TestDoc> data)
        {
            _TestDocChanges = CloneAndSortBy(data, x => x.id, System.Collections.Generic.Comparer<int>.Default);
            _rebuildIsNeeded = true;
        }

        
        public void RemoveTestDoc(int key)
        {
            if(_TestDocChanges == null)
            {
                _TestDocChanges = RemoveCore(memory.TestDocTable.GetRawDataUnsafe(), key, x => x.id, System.Collections.Generic.Comparer<int>.Default, _TestDocChangeTracker);
            }
            else
            {
                _TestDocChanges = RemoveCore(_TestDocChanges, key, x => x.id, System.Collections.Generic.Comparer<int>.Default, _TestDocChangeTracker);
            }
            _rebuildIsNeeded = true;
        }


        public void RemoveTestDoc(int[] keys)
        {
            if(_TestDocChanges == null)
            {
                _TestDocChanges = RemoveCore(memory.TestDocTable.GetRawDataUnsafe(), keys, x => x.id, System.Collections.Generic.Comparer<int>.Default, _TestDocChangeTracker);
            }
            else
            {
                _TestDocChanges = RemoveCore(_TestDocChanges, keys, x => x.id, System.Collections.Generic.Comparer<int>.Default, _TestDocChangeTracker);
            }
            _rebuildIsNeeded = true;
        }

        public void Diff(TestDoc addOrReplaceData)
        {
            if(_TestDocChanges == null)
            {
                _TestDocChanges = DiffCore(memory.TestDocTable.GetRawDataUnsafe(), addOrReplaceData, x => x.id, System.Collections.Generic.Comparer<int>.Default, _TestDocChangeTracker, true);
            }
            else
            {
                _TestDocChanges = DiffCore(_TestDocChanges, addOrReplaceData, x => x.id, System.Collections.Generic.Comparer<int>.Default, _TestDocChangeTracker, false);
            }
            _rebuildIsNeeded = true;
        }

        public void Diff(TestDoc[] addOrReplaceData)
        {
            if(_TestDocChanges == null)
            {
                _TestDocChanges = DiffCore(memory.TestDocTable.GetRawDataUnsafe(), addOrReplaceData, x => x.id, System.Collections.Generic.Comparer<int>.Default, _TestDocChangeTracker, true);  
            }
            else
            {
                _TestDocChanges = DiffCore(_TestDocChanges, addOrReplaceData, x => x.id, System.Collections.Generic.Comparer<int>.Default, _TestDocChangeTracker, false);  
            }
            _rebuildIsNeeded = true;
        }

    }
}