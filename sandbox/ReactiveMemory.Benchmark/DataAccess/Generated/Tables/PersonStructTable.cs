// <auto-generated />
#pragma warning disable CS0105
using MessagePack;
using ReactiveMemory.Benchmark.DataAccess.Models;
using ReactiveMemory.Validation;
using ReactiveMemory;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System;

namespace ReactiveMemory.Benchmark.Tables
{
   public sealed partial class PersonStructTable : TableBase<PersonStruct>, ITableUniqueValidate
   {
        public Func<PersonStruct, int> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<PersonStruct, int> primaryIndexSelector;

        private PersonStruct[] secondaryIndex0;
        private Func<PersonStruct, int> secondaryIndex0Selector;
        private PersonStruct[] secondaryIndex2;
        private Func<PersonStruct, (Gender Gender, int Age)> secondaryIndex2Selector;
        private PersonStruct[] secondaryIndex1;
        private Func<PersonStruct, Gender> secondaryIndex1Selector;

        public PersonStructTable(PersonStruct[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.PersonId;
            var tasks = new List<Task>();
            tasks.Add(Task.Run(() =>
            {
                this.secondaryIndex0Selector = x => x.Age;
                this.secondaryIndex0 = CloneAndSortBy(this.secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default);
            }));
            tasks.Add(Task.Run(() =>
            {
                this.secondaryIndex2Selector = x => (x.Gender, x.Age);
                this.secondaryIndex2 = CloneAndSortBy(this.secondaryIndex2Selector, System.Collections.Generic.Comparer<(Gender Gender, int Age)>.Default);
            }));
            tasks.Add(Task.Run(() =>
            {
                this.secondaryIndex1Selector = x => x.Gender;
                this.secondaryIndex1 = CloneAndSortBy(this.secondaryIndex1Selector, System.Collections.Generic.Comparer<Gender>.Default);
            }));
            Task.WhenAll(tasks).Wait();
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();

        public RangeView<PersonStruct> SortByAge => new RangeView<PersonStruct>(secondaryIndex0, 0, secondaryIndex0.Length - 1, true);
        public RangeView<PersonStruct> SortByGenderAndAge => new RangeView<PersonStruct>(secondaryIndex2, 0, secondaryIndex2.Length - 1, true);
        public RangeView<PersonStruct> SortByGender => new RangeView<PersonStruct>(secondaryIndex1, 0, secondaryIndex1.Length - 1, true);

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public PersonStruct FindByPersonId(int key)
        {
            var lo = 0;
            var hi = data.Length - 1;
            while (lo <= hi)
            {
                var mid = (int)(((uint)hi + (uint)lo) >> 1);
                var selected = data[mid].PersonId;
                var found = (selected < key) ? -1 : (selected > key) ? 1 : 0;
                if (found == 0) { return data[mid]; }
                if (found < 0) { lo = mid + 1; }
                else { hi = mid - 1; }
            }
            return ThrowKeyNotFound(key);
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public bool TryFindByPersonId(int key, out PersonStruct result)
        {
            var lo = 0;
            var hi = data.Length - 1;
            while (lo <= hi)
            {
                var mid = (int)(((uint)hi + (uint)lo) >> 1);
                var selected = data[mid].PersonId;
                var found = (selected < key) ? -1 : (selected > key) ? 1 : 0;
                if (found == 0) { result = data[mid]; return true; }
                if (found < 0) { lo = mid + 1; }
                else { hi = mid - 1; }
            }
            result = default;
            return false;
        }

        public PersonStruct FindClosestByPersonId(int key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<int>.Default, key, selectLower);
        }

        public RangeView<PersonStruct> FindRangeByPersonId(int min, int max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<int>.Default, min, max, ascendant);
        }

        public RangeView<PersonStruct> FindByAge(int key)
        {
            return FindManyCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, key);
        }

        public RangeView<PersonStruct> FindClosestByAge(int key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, key, selectLower);
        }

        public RangeView<PersonStruct> FindRangeByAge(int min, int max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, min, max, ascendant);
        }

        public RangeView<PersonStruct> FindByGenderAndAge((Gender Gender, int Age) key)
        {
            return FindManyCore(secondaryIndex2, secondaryIndex2Selector, System.Collections.Generic.Comparer<(Gender Gender, int Age)>.Default, key);
        }

        public RangeView<PersonStruct> FindClosestByGenderAndAge((Gender Gender, int Age) key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex2, secondaryIndex2Selector, System.Collections.Generic.Comparer<(Gender Gender, int Age)>.Default, key, selectLower);
        }

        public RangeView<PersonStruct> FindRangeByGenderAndAge((Gender Gender, int Age) min, (Gender Gender, int Age) max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex2, secondaryIndex2Selector, System.Collections.Generic.Comparer<(Gender Gender, int Age)>.Default, min, max, ascendant);
        }

        public RangeView<PersonStruct> FindByGender(Gender key)
        {
            return FindManyCore(secondaryIndex1, secondaryIndex1Selector, System.Collections.Generic.Comparer<Gender>.Default, key);
        }

        public RangeView<PersonStruct> FindClosestByGender(Gender key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex1, secondaryIndex1Selector, System.Collections.Generic.Comparer<Gender>.Default, key, selectLower);
        }

        public RangeView<PersonStruct> FindRangeByGender(Gender min, Gender max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex1, secondaryIndex1Selector, System.Collections.Generic.Comparer<Gender>.Default, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "PersonId", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static ReactiveMemory.Meta.MetaTable CreateMetaTable()
        {
            return new ReactiveMemory.Meta.MetaTable(typeof(PersonStruct), typeof(PersonStructTable), "person_struct",
                new ReactiveMemory.Meta.MetaProperty[]
                {
                    new ReactiveMemory.Meta.MetaProperty(typeof(PersonStruct).GetProperty("PersonId")),
                    new ReactiveMemory.Meta.MetaProperty(typeof(PersonStruct).GetProperty("Age")),
                    new ReactiveMemory.Meta.MetaProperty(typeof(PersonStruct).GetProperty("Gender")),
                    new ReactiveMemory.Meta.MetaProperty(typeof(PersonStruct).GetProperty("Name")),
                },
                new ReactiveMemory.Meta.MetaIndex[]{
                    new ReactiveMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(PersonStruct).GetProperty("PersonId"),
                    }, true, true, System.Collections.Generic.Comparer<int>.Default),
                    new ReactiveMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(PersonStruct).GetProperty("Age"),
                    }, false, false, System.Collections.Generic.Comparer<int>.Default),
                    new ReactiveMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(PersonStruct).GetProperty("Gender"),
                        typeof(PersonStruct).GetProperty("Age"),
                    }, false, false, System.Collections.Generic.Comparer<(Gender Gender, int Age)>.Default),
                    new ReactiveMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(PersonStruct).GetProperty("Gender"),
                    }, false, false, System.Collections.Generic.Comparer<Gender>.Default),
                });
        }

#endif
    }
}