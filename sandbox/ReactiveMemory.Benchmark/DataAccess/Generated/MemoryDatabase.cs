// <auto-generated />
#pragma warning disable CS0105
using MessagePack;
using ReactiveMemory.Benchmark.DataAccess.Models;
using ReactiveMemory.Validation;
using ReactiveMemory;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System;
using ReactiveMemory.Benchmark.Tables;

namespace ReactiveMemory.Benchmark
{
   public interface IMemoryDatabase
   {
        public IObservable<EntityChange<TEntity>> OnChange<TEntity>();
        public MonsterTable MonsterTable { get; }
        public PersonTable PersonTable { get; }
   }

   public sealed class MemoryDatabase : MemoryDatabaseBase, IMemoryDatabase
   {
        public MonsterTable MonsterTable { get; private set; }
        public PersonTable PersonTable { get; private set; }

        public MemoryDatabase(
            MonsterTable MonsterTable,
            PersonTable PersonTable
        , ChangesConveyor changesConveyor) : base(changesConveyor)
        {
            this.MonsterTable = MonsterTable;
            this.PersonTable = PersonTable;
        }

        public MemoryDatabase(byte[] databaseBinary, IChangesMediatorFactory changesMediatorFactory, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, changesMediatorFactory, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        public MemoryDatabase(byte[] databaseBinary, ChangesConveyor changesConveyor, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, changesConveyor, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            if(maxDegreeOfParallelism == 1)
            {
                InitSequential(header, databaseBinary, options, maxDegreeOfParallelism);
            }
            else
            {
                InitParallel(header, databaseBinary, options, maxDegreeOfParallelism);
            }
        }

        void InitSequential(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            this.MonsterTable = ExtractTableData<Monster, MonsterTable>(header, databaseBinary, options, xs => new MonsterTable(xs));
            this.PersonTable = ExtractTableData<Person, PersonTable>(header, databaseBinary, options, xs => new PersonTable(xs));
        }

        void InitParallel(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            var extracts = new Action[]
            {
                () => this.MonsterTable = ExtractTableData<Monster, MonsterTable>(header, databaseBinary, options, xs => new MonsterTable(xs)),
                () => this.PersonTable = ExtractTableData<Person, PersonTable>(header, databaseBinary, options, xs => new PersonTable(xs)),
            };
            
            System.Threading.Tasks.Parallel.Invoke(new System.Threading.Tasks.ParallelOptions
            {
                MaxDegreeOfParallelism = maxDegreeOfParallelism
            }, extracts);
        }

        public Transaction BeginTransaction()
        {
            return new Transaction(this);
        }

        public DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new DatabaseBuilder();
            builder.Append(this.MonsterTable.GetRawDataUnsafe());
            builder.Append(this.PersonTable.GetRawDataUnsafe());
            return builder;
        }

        public DatabaseBuilder ToDatabaseBuilder(MessagePack.IFormatterResolver resolver)
        {
            var builder = new DatabaseBuilder(resolver);
            builder.Append(this.MonsterTable.GetRawDataUnsafe());
            builder.Append(this.PersonTable.GetRawDataUnsafe());
            return builder;
        }

#if !DISABLE_MASTERMEMORY_VALIDATOR

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
                MonsterTable,
                PersonTable,
            });

            ((ITableUniqueValidate)MonsterTable).ValidateUnique(result);
            ValidateTable(MonsterTable.All, database, "MonsterId", MonsterTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)PersonTable).ValidateUnique(result);
            ValidateTable(PersonTable.All, database, "PersonId", PersonTable.PrimaryKeySelector, result);

            return result;
        }

#endif

        static ReactiveMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(MemoryDatabase db, string tableName)
        {
            switch (tableName)
            {
                case "monster":
                    return db.MonsterTable;
                case "person":
                    return db.PersonTable;
                
                default:
                    return null;
            }
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static ReactiveMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, ReactiveMemory.Meta.MetaTable>();
            dict.Add("monster", ReactiveMemory.Benchmark.Tables.MonsterTable.CreateMetaTable());
            dict.Add("person", ReactiveMemory.Benchmark.Tables.PersonTable.CreateMetaTable());

            metaTable = new ReactiveMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }

#endif
    }
}