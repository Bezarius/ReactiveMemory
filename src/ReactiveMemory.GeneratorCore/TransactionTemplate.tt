<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated />
#pragma warning disable CS0105
<#= Using #>

namespace <#= Namespace #>
{
   public interface I<#= ClassName #>
   {
<# for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; #>
        public void ReplaceAll(System.Collections.Generic.IList<<#= item.ClassName #>> data);
<# if(!item.PrimaryKey.IsNonUnique) { #>
        public void Remove<#= item.ClassName #>(<#= item.PrimaryKey.BuildTypeName() #> key);
        public void Remove<#= item.ClassName #>(<#= item.PrimaryKey.BuildTypeName() #>[] keys);
        public void Diff(<#= item.ClassName #> addOrReplaceData);
        public void Diff(<#= item.ClassName #>[] addOrReplaceData);
<# } #>
<# } #>
   }

   public sealed class <#= ClassName #> : TransactionBase, I<#= ClassName #>
   {
        <#= PrefixClassName #>MemoryDatabase memory;

<# for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; #>
        private IChangesQueue<<#= item.ClassName #>> _<#= item.ClassName #>ChangeTracker;
<# } #> 

<# for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; #>
        private <#= item.ClassName #>[] _<#= item.ClassName #>Changes;
<# } #> 

        public <#= ClassName #>(<#= PrefixClassName #>MemoryDatabase memory)
        {
            this.memory = memory;
<# for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; #>
            _<#= item.ClassName #>ChangeTracker = this.memory.ChangesConveyor.GetQueue<<#= item.ClassName #>>();
<# } #> 
        }

        public <#= PrefixClassName #>MemoryDatabase Commit()
        {
<# for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; #>
            <#= item.ClassName #>Table <#= item.ClassName #>Table;
            if(_<#= item.ClassName #>Changes != null)
            {
                <#= item.ClassName #>Table = new <#= item.ClassName #>Table(CloneAndSortBy(_<#= item.ClassName #>Changes, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>));
            }
            else
            {
                <#= item.ClassName #>Table = memory.<#= item.ClassName #>Table;
            }
<# } #> 
            memory = new <#= PrefixClassName #>MemoryDatabase(
<# for(var j = 0; j < GenerationContexts.Length; j++) { var item = GenerationContexts[j]; #>
                <#= item.ClassName #>Table,
<# } #> 
                memory.ChangesConveyor             
            );
            memory.ChangesConveyor.Publish();
            return memory;
        }

<# for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; #>
        public void ReplaceAll(System.Collections.Generic.IList<<#= item.ClassName #>> data)
        {
            _<#= item.ClassName #>Changes = CloneAndSortBy(data, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>);
        }

<# if(!item.PrimaryKey.IsNonUnique) { #>
        
        public void Remove<#= item.ClassName #>(<#= item.PrimaryKey.BuildTypeName() #> key)
        {
            if(_<#= item.ClassName #>Changes == null)
            {
                _<#= item.ClassName #>Changes = RemoveCore(memory.<#= item.ClassName #>Table.GetRawDataUnsafe(), key, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>, _<#= item.ClassName #>ChangeTracker);
            }
            else
            {
                _<#= item.ClassName #>Changes = RemoveCore(_<#= item.ClassName #>Changes, key, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>, _<#= item.ClassName #>ChangeTracker);
            }
        }


        public void Remove<#= item.ClassName #>(<#= item.PrimaryKey.BuildTypeName() #>[] keys)
        {
            var data = RemoveCore(memory.<#= item.ClassName #>Table.GetRawDataUnsafe(), keys, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>, _<#= item.ClassName #>ChangeTracker);
            var newData = CloneAndSortBy(data, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>);
            var table = new <#= item.ClassName #>Table(newData);
            memory = new <#= PrefixClassName #>MemoryDatabase(
<# for(var j = 0; j < GenerationContexts.Length; j++) { var item2 = GenerationContexts[j]; #>
                <#= (i == j) ? "table" : "memory." + item2.ClassName + "Table"  #><#= "," #>
<# } #> 
                memory.ChangesConveyor             
            );
        }

        public void Diff(<#= item.ClassName #> addOrReplaceData)
        {
            if(_<#= item.ClassName #>Changes == null)
            {
                _<#= item.ClassName #>Changes = DiffCore(memory.<#= item.ClassName #>Table.GetRawDataUnsafe(), addOrReplaceData, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>, _<#= item.ClassName #>ChangeTracker, true);
            }
            else
            {
                _<#= item.ClassName #>Changes = DiffCore(_<#= item.ClassName #>Changes, addOrReplaceData, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>, _<#= item.ClassName #>ChangeTracker, false);
            }
        }

        public void Diff(<#= item.ClassName #>[] addOrReplaceData)
        {
            if(_<#= item.ClassName #>Changes == null)
            {
                _<#= item.ClassName #>Changes = DiffCore(memory.<#= item.ClassName #>Table.GetRawDataUnsafe(), addOrReplaceData, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>, _<#= item.ClassName #>ChangeTracker).ToArray();  
            }
            else
            {
                _<#= item.ClassName #>Changes = DiffCore(_<#= item.ClassName #>Changes, addOrReplaceData, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>, _<#= item.ClassName #>ChangeTracker).ToArray();  
            }
        }
<# } #>

<# } #>
    }
}