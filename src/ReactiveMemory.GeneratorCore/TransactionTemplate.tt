<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated />
#pragma warning disable CS0105
<#= Using #>

namespace <#= Namespace #>
{
   public interface I<#= ClassName #>
   {
<# for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; #>
        public void ReplaceAll(System.Collections.Generic.IList<<#= item.ClassName #>> data);
<# if(!item.PrimaryKey.IsNonUnique) { #>
        public void Remove<#= item.ClassName #>(<#= item.PrimaryKey.BuildTypeName() #> key);
        public void Remove<#= item.ClassName #>(<#= item.PrimaryKey.BuildTypeName() #>[] keys);
        public void Diff(<#= item.ClassName #> addOrReplaceData);
        public void Diff(<#= item.ClassName #>[] addOrReplaceData);
<# } #>
<# } #>
   }

   public sealed class <#= ClassName #> : TransactionBase, I<#= ClassName #>
   {
        <#= PrefixClassName #>MemoryDatabase memory;

<# for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; #>
        private IChangesQueue<<#= item.ClassName #>> _<#= item.ClassName #>ChangeTracker;
<# } #> 

        public <#= ClassName #>(<#= PrefixClassName #>MemoryDatabase memory)
        {
            this.memory = memory;
<# for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; #>
            _<#= item.ClassName #>ChangeTracker = this.memory.ChangesConveyor.GetQueue<<#= item.ClassName #>>();
<# } #> 
        }

        public <#= PrefixClassName #>MemoryDatabase Commit()
        {
            memory.ChangesConveyor.Publish();
            return memory;
        }

<# for(var i = 0; i < GenerationContexts.Length; i++) { var item = GenerationContexts[i]; #>
        public void ReplaceAll(System.Collections.Generic.IList<<#= item.ClassName #>> data)
        {
            var newData = CloneAndSortBy(data, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>);
            var table = new <#= item.ClassName #>Table(newData);
            memory = new <#= PrefixClassName #>MemoryDatabase(
<# for(var j = 0; j < GenerationContexts.Length; j++) { var item2 = GenerationContexts[j]; #>
                <#= (i == j) ? "table" : "memory." + item2.ClassName + "Table"  #><#= "," #>
<# } #> 
                memory.ChangesConveyor            
            );
        }

<# if(!item.PrimaryKey.IsNonUnique) { #>
        
        public void Remove<#= item.ClassName #>(<#= item.PrimaryKey.BuildTypeName() #> key)
        {
            var data = RemoveCore(memory.<#= item.ClassName #>Table.GetRawDataUnsafe(), key, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>, _<#= item.ClassName #>ChangeTracker);
            var newData = CloneAndSortBy(data, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>);
            var table = new <#= item.ClassName #>Table(newData);
            memory = new <#= PrefixClassName #>MemoryDatabase(
<# for(var j = 0; j < GenerationContexts.Length; j++) { var item2 = GenerationContexts[j]; #>
                <#= (i == j) ? "table" : "memory." + item2.ClassName + "Table"  #><#= "," #>
<# } #>
                memory.ChangesConveyor             
            );
        }


        public void Remove<#= item.ClassName #>(<#= item.PrimaryKey.BuildTypeName() #>[] keys)
        {
            var data = RemoveCore(memory.<#= item.ClassName #>Table.GetRawDataUnsafe(), keys, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>, _<#= item.ClassName #>ChangeTracker);
            var newData = CloneAndSortBy(data, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>);
            var table = new <#= item.ClassName #>Table(newData);
            memory = new <#= PrefixClassName #>MemoryDatabase(
<# for(var j = 0; j < GenerationContexts.Length; j++) { var item2 = GenerationContexts[j]; #>
                <#= (i == j) ? "table" : "memory." + item2.ClassName + "Table"  #><#= "," #>
<# } #> 
                memory.ChangesConveyor             
            );
        }

        public void Diff(<#= item.ClassName #> addOrReplaceData)
        {
            var data = DiffCore(memory.<#= item.ClassName #>Table.GetRawDataUnsafe(), addOrReplaceData, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>, _<#= item.ClassName #>ChangeTracker);
            var newData = CloneAndSortBy(data, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>);
            var table = new <#= item.ClassName #>Table(newData);
            memory = new <#= PrefixClassName #>MemoryDatabase(
<# for(var j = 0; j < GenerationContexts.Length; j++) { var item2 = GenerationContexts[j]; #>
                <#= (i == j) ? "table" : "memory." + item2.ClassName + "Table"  #><#= "," #>
<# } #> 
                memory.ChangesConveyor             
            );
        }

        public void Diff(<#= item.ClassName #>[] addOrReplaceData)
        {
            var data = DiffCore(memory.<#= item.ClassName #>Table.GetRawDataUnsafe(), addOrReplaceData, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>, _<#= item.ClassName #>ChangeTracker);
            var newData = CloneAndSortBy(data, x => <#= item.PrimaryKey.BuildKeyAccessor("x") #>, <#= item.PrimaryKey.BuildComparer() #>);
            var table = new <#= item.ClassName #>Table(newData);
            memory = new <#= PrefixClassName #>MemoryDatabase(
<# for(var j = 0; j < GenerationContexts.Length; j++) { var item2 = GenerationContexts[j]; #>
                <#= (i == j) ? "table" : "memory." + item2.ClassName + "Table"  #><#= "," #>
<# } #> 
                memory.ChangesConveyor             
            );
        }
<# } #>

<# } #>
    }
}