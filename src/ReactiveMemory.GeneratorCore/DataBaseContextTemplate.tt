<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated />
#pragma warning disable CS0105
namespace <#= Namespace #>
{
   public sealed class <#= ClassName #> 
   {
		public MemoryDatabase Database { get; private set; }
        public Transaction Transaction { get; private set; }
        public bool IsTransactionStarted { get; private set; }

        public DbContext(byte[] dbBytes, IChangesMediatorFactory changesMediatorFactory)
        {
            Database = new MemoryDatabase(dbBytes, changesMediatorFactory);
        }

        public void BeginTransaction()
        {
            if (IsTransactionStarted)
            {
                throw new InvalidOperationException("Transaction is already started");
            }

            IsTransactionStarted = true;

            // it just cast, but when we make changes it make copy of data, so Database will not be changed
            Transaction = Database.BeginTransaction();
        }


        public void Commit()
        {
            if (!IsTransactionStarted)
            {
                throw new InvalidOperationException("Transaction is not started");
            }

            // cast to MemoryDatabase
            Database = Transaction.Commit();

            /* when we want write changes to disk or cast to bytes to for data protection
            // for example, we can compare data from disk and data from memory and if they are not equal ban player
            // serialize changed data to binary
            var bytes = memoryDatabase.ToDatabaseBuilder().Build();
            // create new MemoryDatabase from bytes
            Database = new MemoryDatabase(bytes, maxDegreeOfParallelism: Environment.ProcessorCount);*/

            IsTransactionStarted = false;
        }

        public void Rollback()
        {
            // all changes in Transaction, so we just set it to null to discard changes
            Database.ChangesConveyor.Clear();
            Transaction = null;
            IsTransactionStarted = false;
        }		
   }
}