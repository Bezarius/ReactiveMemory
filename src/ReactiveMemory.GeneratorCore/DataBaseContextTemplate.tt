<#@ template debug="false" hostspecific="false" linePragmas="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated />
#pragma warning disable CS0105
<#= Using #>

namespace <#= Namespace #>
{
   public sealed class <#= ClassName #>  : IDisposable
   {
        public bool IsTransactionStarted { get; private set; }
        public event Action OnUnauthorizedMemoryModification;
		public I<#= MemoryDatabaseClassName #>  Database => _database ??= new <#=MemoryDatabaseClassName#>(_data, _changesConveyor, maxDegreeOfParallelism : Environment.ProcessorCount);
        public I<#= TransactionClassName #>  Transaction => _transaction;
        public event Action OnTransactionFinished;

        private <#= MemoryDatabaseClassName #> _database;
        private <#= TransactionClassName #> _transaction;
        private ChangesConveyor _changesConveyor;
        private bool _compositeTransactionIsStarted;
        private byte[] _data;
        private byte[] _hash;
        private HashAlgorithm _hashAlg;

        public DbContext(byte[] dbBytes, IChangesMediatorFactory changesMediatorFactory, string hashAlg = "")
        {
            _changesConveyor = new ChangesConveyor(changesMediatorFactory);
            _data = dbBytes;
            if(!string.IsNullOrWhiteSpace(hashAlg))
			{
				_hashAlg = HashAlgorithm.Create(hashAlg);
				_hash = _hashAlg.ComputeHash(_data);
			}
        }

        public ITransaction BeginCompositeTransaction()
        {
            if (_compositeTransactionIsStarted)
            {
                throw new InvalidOperationException("Composite transaction is already started");
            }
            _compositeTransactionIsStarted = true;

            if (IsTransactionStarted)
                return _transaction;
            else
                return BeginTransaction();
        }

        public void CommitCompositeTransaction()
        {
            if (!_compositeTransactionIsStarted)
            {
                throw new InvalidOperationException("Composite transaction is not started");
            }
            _compositeTransactionIsStarted = false;
            
            Commit();
        }

        public I<#=TransactionClassName#> BeginTransaction()
        {
            if (IsTransactionStarted)
            {
                if (_compositeTransactionIsStarted)
                        return _transaction;
                throw new InvalidOperationException("Transaction is already started");
            }

            IsTransactionStarted = true;
            if (_database == null)
            {
                // serialization of db from bytes, it's slow
                _database = new <#=MemoryDatabaseClassName#>(_data, _changesConveyor, maxDegreeOfParallelism : Environment.ProcessorCount);
            }
            else if(_hashAlg != null)
            {
                // calc hash of current db data
                var prevDataHash = _hashAlg.ComputeHash(_data); 
                if (!prevDataHash.SequenceEqual(_hash) || !prevDataHash.SequenceEqual(_hashAlg.ComputeHash(ToBytes())))
                {
                    // detected memory modifications
                    OnUnauthorizedMemoryModification?.Invoke();
                }
            }
            // it just cast, but when we make changes it make copy of data, so Database will not be changed
            _transaction = _database.BeginTransaction();
            return _transaction;
        }


        public void Commit()
        {
            if (!IsTransactionStarted)
            {
                throw new InvalidOperationException("Transaction is not started");
            }

            if(_compositeTransactionIsStarted)
                return;

            // cast to  <#= MemoryDatabaseClassName #> 
            _database = _transaction.Commit();
            OnTransactionFinished?.Invoke();
            if(_hashAlg != null)
			{
				_data = ToBytes();
				_hash = _hashAlg.ComputeHash(_data);
			}
            IsTransactionStarted = false;
        }

        public void Rollback()
        {
            // all changes in Transaction, so we just set it to null to discard changes
            _database.ChangesConveyor.Clear();
            _transaction = null;
            IsTransactionStarted = false;
            _compositeTransactionIsStarted = false;
        }

        public void Reload(byte[] data)
        {
            if (_compositeTransactionIsStarted || IsTransactionStarted)
            {
                throw new InvalidOperationException("Transaction is already started");
            }
            _data = data;
            _changesConveyor.Clear();
            _hash = null;
            _database = null;
        }
        
        public byte[] ToBytes()
        {
            return _database.ToDatabaseBuilder().Build();
        }

        public void Dispose()
        {
            _changesConveyor?.Dispose();
            _hashAlg?.Dispose();
        }
   }
}