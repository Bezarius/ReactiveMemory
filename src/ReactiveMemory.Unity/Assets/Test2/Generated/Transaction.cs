// <auto-generated />
#pragma warning disable CS0105
using MessagePack;
using ReactiveMemory.Tests;
using ReactiveMemory.Validation;
using ReactiveMemory;
using System.Collections.Generic;
using System;
using ReactiveMemory.Test2.Tables;

namespace ReactiveMemory.Test2
{
   public interface ITransaction
   {
        public void ReplaceAll(System.Collections.Generic.IList<UserLevel> data);
        public void RemoveUserLevel(int key);
        public void RemoveUserLevel(int[] keys);
        public void Diff(UserLevel addOrReplaceData);
        public void Diff(UserLevel[] addOrReplaceData);
   }

   public sealed class Transaction : TransactionBase, ITransaction
   {
        MemoryDatabase memory;

        private IChangesQueue<UserLevel> _UserLevelChangeTracker;
 

        public Transaction(MemoryDatabase memory)
        {
            this.memory = memory;
            _UserLevelChangeTracker = this.memory.ChangesConveyor.GetQueue<UserLevel>();
 
        }

        public MemoryDatabase Commit()
        {
            memory.ChangesConveyor.Publish();
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<UserLevel> data)
        {
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new UserLevelTable(newData);
            memory = new MemoryDatabase(
                table,
 
                memory.ChangesConveyor            
            );
        }

        
        public void RemoveUserLevel(int key)
        {
            var data = RemoveCore(memory.UserLevelTable.GetRawDataUnsafe(), key, x => x.Level, System.Collections.Generic.Comparer<int>.Default, _UserLevelChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new UserLevelTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.ChangesConveyor             
            );
        }


        public void RemoveUserLevel(int[] keys)
        {
            var data = RemoveCore(memory.UserLevelTable.GetRawDataUnsafe(), keys, x => x.Level, System.Collections.Generic.Comparer<int>.Default, _UserLevelChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new UserLevelTable(newData);
            memory = new MemoryDatabase(
                table,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(UserLevel addOrReplaceData)
        {
            var data = DiffCore(memory.UserLevelTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Level, System.Collections.Generic.Comparer<int>.Default, _UserLevelChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new UserLevelTable(newData);
            memory = new MemoryDatabase(
                table,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(UserLevel[] addOrReplaceData)
        {
            var data = DiffCore(memory.UserLevelTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Level, System.Collections.Generic.Comparer<int>.Default, _UserLevelChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new UserLevelTable(newData);
            memory = new MemoryDatabase(
                table,
 
                memory.ChangesConveyor             
            );
        }

    }
}