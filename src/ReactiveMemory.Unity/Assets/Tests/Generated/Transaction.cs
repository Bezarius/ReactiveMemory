// <auto-generated />
#pragma warning disable CS0105
using MessagePack;
using ReactiveMemory.Tests.TestStructures;
using ReactiveMemory.Tests;
using ReactiveMemory.Validation;
using ReactiveMemory;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System;
using ReactiveMemory.Tests.Tables;

namespace ReactiveMemory.Tests
{
   public interface ITransaction
   {
        public void ReplaceAll(System.Collections.Generic.IList<Fail> data);
        public void RemoveFail(int key);
        public void RemoveFail(int[] keys);
        public void Diff(Fail addOrReplaceData);
        public void Diff(Fail[] addOrReplaceData);
        public void ReplaceAll(System.Collections.Generic.IList<ItemMaster> data);
        public void RemoveItemMaster(int key);
        public void RemoveItemMaster(int[] keys);
        public void Diff(ItemMaster addOrReplaceData);
        public void Diff(ItemMaster[] addOrReplaceData);
        public void ReplaceAll(System.Collections.Generic.IList<ItemMasterEmptyValidate> data);
        public void RemoveItemMasterEmptyValidate(int key);
        public void RemoveItemMasterEmptyValidate(int[] keys);
        public void Diff(ItemMasterEmptyValidate addOrReplaceData);
        public void Diff(ItemMasterEmptyValidate[] addOrReplaceData);
        public void ReplaceAll(System.Collections.Generic.IList<PersonModel> data);
        public void RemovePersonModel(string key);
        public void RemovePersonModel(string[] keys);
        public void Diff(PersonModel addOrReplaceData);
        public void Diff(PersonModel[] addOrReplaceData);
        public void ReplaceAll(System.Collections.Generic.IList<QuestMaster> data);
        public void RemoveQuestMaster(int key);
        public void RemoveQuestMaster(int[] keys);
        public void Diff(QuestMaster addOrReplaceData);
        public void Diff(QuestMaster[] addOrReplaceData);
        public void ReplaceAll(System.Collections.Generic.IList<QuestMasterEmptyValidate> data);
        public void RemoveQuestMasterEmptyValidate(int key);
        public void RemoveQuestMasterEmptyValidate(int[] keys);
        public void Diff(QuestMasterEmptyValidate addOrReplaceData);
        public void Diff(QuestMasterEmptyValidate[] addOrReplaceData);
        public void ReplaceAll(System.Collections.Generic.IList<Sample> data);
        public void RemoveSample(int key);
        public void RemoveSample(int[] keys);
        public void Diff(Sample addOrReplaceData);
        public void Diff(Sample[] addOrReplaceData);
        public void ReplaceAll(System.Collections.Generic.IList<SequentialCheckMaster> data);
        public void RemoveSequentialCheckMaster(int key);
        public void RemoveSequentialCheckMaster(int[] keys);
        public void Diff(SequentialCheckMaster addOrReplaceData);
        public void Diff(SequentialCheckMaster[] addOrReplaceData);
        public void ReplaceAll(System.Collections.Generic.IList<SingleMaster> data);
        public void RemoveSingleMaster(int key);
        public void RemoveSingleMaster(int[] keys);
        public void Diff(SingleMaster addOrReplaceData);
        public void Diff(SingleMaster[] addOrReplaceData);
        public void ReplaceAll(System.Collections.Generic.IList<SkillMaster> data);
        public void RemoveSkillMaster((int SkillId, int SkillLevel) key);
        public void RemoveSkillMaster((int SkillId, int SkillLevel)[] keys);
        public void Diff(SkillMaster addOrReplaceData);
        public void Diff(SkillMaster[] addOrReplaceData);
        public void ReplaceAll(System.Collections.Generic.IList<TestMaster> data);
        public void ReplaceAll(System.Collections.Generic.IList<UserLevel> data);
        public void RemoveUserLevel(int key);
        public void RemoveUserLevel(int[] keys);
        public void Diff(UserLevel addOrReplaceData);
        public void Diff(UserLevel[] addOrReplaceData);
   }

   public sealed class Transaction : TransactionBase, ITransaction
   {
        MemoryDatabase memory;

        private IChangesQueue<Fail> _FailChangeTracker;
        private IChangesQueue<ItemMaster> _ItemMasterChangeTracker;
        private IChangesQueue<ItemMasterEmptyValidate> _ItemMasterEmptyValidateChangeTracker;
        private IChangesQueue<PersonModel> _PersonModelChangeTracker;
        private IChangesQueue<QuestMaster> _QuestMasterChangeTracker;
        private IChangesQueue<QuestMasterEmptyValidate> _QuestMasterEmptyValidateChangeTracker;
        private IChangesQueue<Sample> _SampleChangeTracker;
        private IChangesQueue<SequentialCheckMaster> _SequentialCheckMasterChangeTracker;
        private IChangesQueue<SingleMaster> _SingleMasterChangeTracker;
        private IChangesQueue<SkillMaster> _SkillMasterChangeTracker;
        private IChangesQueue<TestMaster> _TestMasterChangeTracker;
        private IChangesQueue<UserLevel> _UserLevelChangeTracker;
 

        public Transaction(MemoryDatabase memory)
        {
            this.memory = memory;
            _FailChangeTracker = this.memory.ChangesConveyor.GetQueue<Fail>();
            _ItemMasterChangeTracker = this.memory.ChangesConveyor.GetQueue<ItemMaster>();
            _ItemMasterEmptyValidateChangeTracker = this.memory.ChangesConveyor.GetQueue<ItemMasterEmptyValidate>();
            _PersonModelChangeTracker = this.memory.ChangesConveyor.GetQueue<PersonModel>();
            _QuestMasterChangeTracker = this.memory.ChangesConveyor.GetQueue<QuestMaster>();
            _QuestMasterEmptyValidateChangeTracker = this.memory.ChangesConveyor.GetQueue<QuestMasterEmptyValidate>();
            _SampleChangeTracker = this.memory.ChangesConveyor.GetQueue<Sample>();
            _SequentialCheckMasterChangeTracker = this.memory.ChangesConveyor.GetQueue<SequentialCheckMaster>();
            _SingleMasterChangeTracker = this.memory.ChangesConveyor.GetQueue<SingleMaster>();
            _SkillMasterChangeTracker = this.memory.ChangesConveyor.GetQueue<SkillMaster>();
            _TestMasterChangeTracker = this.memory.ChangesConveyor.GetQueue<TestMaster>();
            _UserLevelChangeTracker = this.memory.ChangesConveyor.GetQueue<UserLevel>();
 
        }

        public MemoryDatabase Commit()
        {
            memory.ChangesConveyor.Publish();
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<Fail> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new FailTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor            
            );
        }

        
        public void RemoveFail(int key)
        {
            var data = RemoveCore(memory.FailTable.GetRawDataUnsafe(), key, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _FailChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new FailTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
                memory.ChangesConveyor             
            );
        }


        public void RemoveFail(int[] keys)
        {
            var data = RemoveCore(memory.FailTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _FailChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new FailTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(Fail addOrReplaceData)
        {
            var data = DiffCore(memory.FailTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _FailChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new FailTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(Fail[] addOrReplaceData)
        {
            var data = DiffCore(memory.FailTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _FailChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new FailTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<ItemMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                table,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor            
            );
        }

        
        public void RemoveItemMaster(int key)
        {
            var data = RemoveCore(memory.ItemMasterTable.GetRawDataUnsafe(), key, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default, _ItemMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                table,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
                memory.ChangesConveyor             
            );
        }


        public void RemoveItemMaster(int[] keys)
        {
            var data = RemoveCore(memory.ItemMasterTable.GetRawDataUnsafe(), keys, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default, _ItemMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                table,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(ItemMaster addOrReplaceData)
        {
            var data = DiffCore(memory.ItemMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default, _ItemMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                table,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(ItemMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.ItemMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default, _ItemMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                table,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<ItemMasterEmptyValidate> data)
        {
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                table,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor            
            );
        }

        
        public void RemoveItemMasterEmptyValidate(int key)
        {
            var data = RemoveCore(memory.ItemMasterEmptyValidateTable.GetRawDataUnsafe(), key, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default, _ItemMasterEmptyValidateChangeTracker);
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                table,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
                memory.ChangesConveyor             
            );
        }


        public void RemoveItemMasterEmptyValidate(int[] keys)
        {
            var data = RemoveCore(memory.ItemMasterEmptyValidateTable.GetRawDataUnsafe(), keys, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default, _ItemMasterEmptyValidateChangeTracker);
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                table,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(ItemMasterEmptyValidate addOrReplaceData)
        {
            var data = DiffCore(memory.ItemMasterEmptyValidateTable.GetRawDataUnsafe(), addOrReplaceData, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default, _ItemMasterEmptyValidateChangeTracker);
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                table,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(ItemMasterEmptyValidate[] addOrReplaceData)
        {
            var data = DiffCore(memory.ItemMasterEmptyValidateTable.GetRawDataUnsafe(), addOrReplaceData, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default, _ItemMasterEmptyValidateChangeTracker);
            var newData = CloneAndSortBy(data, x => x.ItemId, System.Collections.Generic.Comparer<int>.Default);
            var table = new ItemMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                table,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<PersonModel> data)
        {
            var newData = CloneAndSortBy(data, x => x.RandomId, System.StringComparer.Ordinal);
            var table = new PersonModelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                table,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor            
            );
        }

        
        public void RemovePersonModel(string key)
        {
            var data = RemoveCore(memory.PersonModelTable.GetRawDataUnsafe(), key, x => x.RandomId, System.StringComparer.Ordinal, _PersonModelChangeTracker);
            var newData = CloneAndSortBy(data, x => x.RandomId, System.StringComparer.Ordinal);
            var table = new PersonModelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                table,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
                memory.ChangesConveyor             
            );
        }


        public void RemovePersonModel(string[] keys)
        {
            var data = RemoveCore(memory.PersonModelTable.GetRawDataUnsafe(), keys, x => x.RandomId, System.StringComparer.Ordinal, _PersonModelChangeTracker);
            var newData = CloneAndSortBy(data, x => x.RandomId, System.StringComparer.Ordinal);
            var table = new PersonModelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                table,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(PersonModel addOrReplaceData)
        {
            var data = DiffCore(memory.PersonModelTable.GetRawDataUnsafe(), addOrReplaceData, x => x.RandomId, System.StringComparer.Ordinal, _PersonModelChangeTracker);
            var newData = CloneAndSortBy(data, x => x.RandomId, System.StringComparer.Ordinal);
            var table = new PersonModelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                table,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(PersonModel[] addOrReplaceData)
        {
            var data = DiffCore(memory.PersonModelTable.GetRawDataUnsafe(), addOrReplaceData, x => x.RandomId, System.StringComparer.Ordinal, _PersonModelChangeTracker);
            var newData = CloneAndSortBy(data, x => x.RandomId, System.StringComparer.Ordinal);
            var table = new PersonModelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                table,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<QuestMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                table,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor            
            );
        }

        
        public void RemoveQuestMaster(int key)
        {
            var data = RemoveCore(memory.QuestMasterTable.GetRawDataUnsafe(), key, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default, _QuestMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                table,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
                memory.ChangesConveyor             
            );
        }


        public void RemoveQuestMaster(int[] keys)
        {
            var data = RemoveCore(memory.QuestMasterTable.GetRawDataUnsafe(), keys, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default, _QuestMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                table,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(QuestMaster addOrReplaceData)
        {
            var data = DiffCore(memory.QuestMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default, _QuestMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                table,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(QuestMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.QuestMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default, _QuestMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                table,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<QuestMasterEmptyValidate> data)
        {
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                table,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor            
            );
        }

        
        public void RemoveQuestMasterEmptyValidate(int key)
        {
            var data = RemoveCore(memory.QuestMasterEmptyValidateTable.GetRawDataUnsafe(), key, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default, _QuestMasterEmptyValidateChangeTracker);
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                table,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
                memory.ChangesConveyor             
            );
        }


        public void RemoveQuestMasterEmptyValidate(int[] keys)
        {
            var data = RemoveCore(memory.QuestMasterEmptyValidateTable.GetRawDataUnsafe(), keys, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default, _QuestMasterEmptyValidateChangeTracker);
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                table,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(QuestMasterEmptyValidate addOrReplaceData)
        {
            var data = DiffCore(memory.QuestMasterEmptyValidateTable.GetRawDataUnsafe(), addOrReplaceData, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default, _QuestMasterEmptyValidateChangeTracker);
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                table,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(QuestMasterEmptyValidate[] addOrReplaceData)
        {
            var data = DiffCore(memory.QuestMasterEmptyValidateTable.GetRawDataUnsafe(), addOrReplaceData, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default, _QuestMasterEmptyValidateChangeTracker);
            var newData = CloneAndSortBy(data, x => x.QuestId, System.Collections.Generic.Comparer<int>.Default);
            var table = new QuestMasterEmptyValidateTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                table,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<Sample> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SampleTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                table,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor            
            );
        }

        
        public void RemoveSample(int key)
        {
            var data = RemoveCore(memory.SampleTable.GetRawDataUnsafe(), key, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _SampleChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SampleTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                table,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
                memory.ChangesConveyor             
            );
        }


        public void RemoveSample(int[] keys)
        {
            var data = RemoveCore(memory.SampleTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _SampleChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SampleTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                table,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(Sample addOrReplaceData)
        {
            var data = DiffCore(memory.SampleTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _SampleChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SampleTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                table,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(Sample[] addOrReplaceData)
        {
            var data = DiffCore(memory.SampleTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _SampleChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SampleTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                table,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<SequentialCheckMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SequentialCheckMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                table,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor            
            );
        }

        
        public void RemoveSequentialCheckMaster(int key)
        {
            var data = RemoveCore(memory.SequentialCheckMasterTable.GetRawDataUnsafe(), key, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _SequentialCheckMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SequentialCheckMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                table,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
                memory.ChangesConveyor             
            );
        }


        public void RemoveSequentialCheckMaster(int[] keys)
        {
            var data = RemoveCore(memory.SequentialCheckMasterTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _SequentialCheckMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SequentialCheckMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                table,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(SequentialCheckMaster addOrReplaceData)
        {
            var data = DiffCore(memory.SequentialCheckMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _SequentialCheckMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SequentialCheckMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                table,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(SequentialCheckMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.SequentialCheckMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _SequentialCheckMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SequentialCheckMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                table,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<SingleMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SingleMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                table,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor            
            );
        }

        
        public void RemoveSingleMaster(int key)
        {
            var data = RemoveCore(memory.SingleMasterTable.GetRawDataUnsafe(), key, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _SingleMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SingleMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                table,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
                memory.ChangesConveyor             
            );
        }


        public void RemoveSingleMaster(int[] keys)
        {
            var data = RemoveCore(memory.SingleMasterTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _SingleMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SingleMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                table,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(SingleMaster addOrReplaceData)
        {
            var data = DiffCore(memory.SingleMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _SingleMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SingleMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                table,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(SingleMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.SingleMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default, _SingleMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SingleMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                table,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<SkillMaster> data)
        {
            var newData = CloneAndSortBy(data, x => (x.SkillId, x.SkillLevel), System.Collections.Generic.Comparer<(int SkillId, int SkillLevel)>.Default);
            var table = new SkillMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                table,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor            
            );
        }

        
        public void RemoveSkillMaster((int SkillId, int SkillLevel) key)
        {
            var data = RemoveCore(memory.SkillMasterTable.GetRawDataUnsafe(), key, x => (x.SkillId, x.SkillLevel), System.Collections.Generic.Comparer<(int SkillId, int SkillLevel)>.Default, _SkillMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => (x.SkillId, x.SkillLevel), System.Collections.Generic.Comparer<(int SkillId, int SkillLevel)>.Default);
            var table = new SkillMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                table,
                memory.TestMasterTable,
                memory.UserLevelTable,
                memory.ChangesConveyor             
            );
        }


        public void RemoveSkillMaster((int SkillId, int SkillLevel)[] keys)
        {
            var data = RemoveCore(memory.SkillMasterTable.GetRawDataUnsafe(), keys, x => (x.SkillId, x.SkillLevel), System.Collections.Generic.Comparer<(int SkillId, int SkillLevel)>.Default, _SkillMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => (x.SkillId, x.SkillLevel), System.Collections.Generic.Comparer<(int SkillId, int SkillLevel)>.Default);
            var table = new SkillMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                table,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(SkillMaster addOrReplaceData)
        {
            var data = DiffCore(memory.SkillMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => (x.SkillId, x.SkillLevel), System.Collections.Generic.Comparer<(int SkillId, int SkillLevel)>.Default, _SkillMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => (x.SkillId, x.SkillLevel), System.Collections.Generic.Comparer<(int SkillId, int SkillLevel)>.Default);
            var table = new SkillMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                table,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(SkillMaster[] addOrReplaceData)
        {
            var data = DiffCore(memory.SkillMasterTable.GetRawDataUnsafe(), addOrReplaceData, x => (x.SkillId, x.SkillLevel), System.Collections.Generic.Comparer<(int SkillId, int SkillLevel)>.Default, _SkillMasterChangeTracker);
            var newData = CloneAndSortBy(data, x => (x.SkillId, x.SkillLevel), System.Collections.Generic.Comparer<(int SkillId, int SkillLevel)>.Default);
            var table = new SkillMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                table,
                memory.TestMasterTable,
                memory.UserLevelTable,
 
                memory.ChangesConveyor             
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<TestMaster> data)
        {
            var newData = CloneAndSortBy(data, x => x.TestID, System.Collections.Generic.Comparer<int>.Default);
            var table = new TestMasterTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                table,
                memory.UserLevelTable,
 
                memory.ChangesConveyor            
            );
        }


        public void ReplaceAll(System.Collections.Generic.IList<UserLevel> data)
        {
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new UserLevelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                table,
 
                memory.ChangesConveyor            
            );
        }

        
        public void RemoveUserLevel(int key)
        {
            var data = RemoveCore(memory.UserLevelTable.GetRawDataUnsafe(), key, x => x.Level, System.Collections.Generic.Comparer<int>.Default, _UserLevelChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new UserLevelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                table,
                memory.ChangesConveyor             
            );
        }


        public void RemoveUserLevel(int[] keys)
        {
            var data = RemoveCore(memory.UserLevelTable.GetRawDataUnsafe(), keys, x => x.Level, System.Collections.Generic.Comparer<int>.Default, _UserLevelChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new UserLevelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                table,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(UserLevel addOrReplaceData)
        {
            var data = DiffCore(memory.UserLevelTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Level, System.Collections.Generic.Comparer<int>.Default, _UserLevelChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new UserLevelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                table,
 
                memory.ChangesConveyor             
            );
        }

        public void Diff(UserLevel[] addOrReplaceData)
        {
            var data = DiffCore(memory.UserLevelTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Level, System.Collections.Generic.Comparer<int>.Default, _UserLevelChangeTracker);
            var newData = CloneAndSortBy(data, x => x.Level, System.Collections.Generic.Comparer<int>.Default);
            var table = new UserLevelTable(newData);
            memory = new MemoryDatabase(
                memory.FailTable,
                memory.ItemMasterTable,
                memory.ItemMasterEmptyValidateTable,
                memory.PersonModelTable,
                memory.QuestMasterTable,
                memory.QuestMasterEmptyValidateTable,
                memory.SampleTable,
                memory.SequentialCheckMasterTable,
                memory.SingleMasterTable,
                memory.SkillMasterTable,
                memory.TestMasterTable,
                table,
 
                memory.ChangesConveyor             
            );
        }

    }
}