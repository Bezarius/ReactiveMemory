// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace ReactiveMemory.ReactiveMemoryAssetGenerationSettings.Formatters.ReactiveMemory.Tests
{
    public sealed class SkillMasterFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ReactiveMemory.Tests.SkillMaster>
    {
        // SkillId
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillId() => new byte[1 + 7] { 167, 83, 107, 105, 108, 108, 73, 100 };
        // SkillLevel
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillLevel() => new byte[1 + 10] { 170, 83, 107, 105, 108, 108, 76, 101, 118, 101, 108 };
        // AttackPower
        private static global::System.ReadOnlySpan<byte> GetSpan_AttackPower() => new byte[1 + 11] { 171, 65, 116, 116, 97, 99, 107, 80, 111, 119, 101, 114 };
        // SkillName
        private static global::System.ReadOnlySpan<byte> GetSpan_SkillName() => new byte[1 + 9] { 169, 83, 107, 105, 108, 108, 78, 97, 109, 101 };
        // Description
        private static global::System.ReadOnlySpan<byte> GetSpan_Description() => new byte[1 + 11] { 171, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::ReactiveMemory.Tests.SkillMaster value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(5);
            writer.WriteRaw(GetSpan_SkillId());
            writer.Write(value.SkillId);
            writer.WriteRaw(GetSpan_SkillLevel());
            writer.Write(value.SkillLevel);
            writer.WriteRaw(GetSpan_AttackPower());
            writer.Write(value.AttackPower);
            writer.WriteRaw(GetSpan_SkillName());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.SkillName, options);
            writer.WriteRaw(GetSpan_Description());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Description, options);
        }

        public global::ReactiveMemory.Tests.SkillMaster Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __SkillId__ = default(int);
            var __SkillLevel__ = default(int);
            var __AttackPower__ = default(int);
            var __SkillName__ = default(string);
            var __Description__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 28228227695209299UL) { goto FAIL; }

                        __SkillId__ = reader.ReadInt32();
                        continue;
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SkillLevel().Slice(1))) { goto FAIL; }

                        __SkillLevel__ = reader.ReadInt32();
                        continue;
                    case 11:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8021029010927809601UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7497079UL) { goto FAIL; }

                                __AttackPower__ = reader.ReadInt32();
                                continue;

                            case 8390322045806929220UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 7237481UL) { goto FAIL; }

                                __Description__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                                continue;

                        }
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_SkillName().Slice(1))) { goto FAIL; }

                        __SkillName__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::ReactiveMemory.Tests.SkillMaster(__SkillId__, __SkillLevel__, __AttackPower__, __SkillName__, __Description__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name
