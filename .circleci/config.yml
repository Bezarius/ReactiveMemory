version: 2.1
executors:
  dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      NUGET_XMLDOC_MODE: skip
  unity:
    # https://hub.docker.com/r/gableroux/unity3d/tags
    parameters:
      version: { type: string }
    docker:
      - image: gableroux/unity3d:<< parameters.version >>
  go:
    docker:
      - image: circleci/golang
commands:
  unity_activate:
    parameters:
      unity_version: { type: string }
      unity_license: { type: string }
    steps:
      # get activation file, if fail to activate unity, use this key and activate from https://license.unity3d.com/manual
      - run: apt update && apt install libunwind8 -y
      - run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -logFile -createManualActivationFile || exit 0
      - store_artifacts:
          path: Unity_v<< parameters.unity_version >>.alf
          destination: /Unity_v<< parameters.unity_version >>.alf
      # get from UNITY_LICENSE envvar(base64 encoded(cat foo.ulf | base64 )), this file is generated from above manual activation
      - run: echo << parameters.unity_license >> | base64 -di  >> .circleci/Unity.ulf
      - run: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -manualLicenseFile .circleci/Unity.ulf || exit 0
jobs:
  # create package for Unity
  build-unity:
    parameters:
      unity_version: { type: string }
      unity_license: { type: string }
    executor:
      name: unity
      version: << parameters.unity_version >>
    steps:
      - run: apt update && apt install git -y
      - checkout
      - unity_activate:
          unity_version: << parameters.unity_version >>
          unity_license: << parameters.unity_license >>
      - run:
          name: Build Linux(Mono)
          command: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod UnitTestBuilder.BuildUnitTest /headless /ScriptBackend Mono2x /BuildTarget StandaloneLinux64
          working_directory: src/MasterMemory.Unity
      - run: ./src/MasterMemory.Unity/bin/UnitTest/StandaloneLinux64_Mono2x/test
      - run:
          name: Export unitypackage
          command: /opt/Unity/Editor/Unity -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod PackageExporter.Export
          working_directory: src/MasterMemory.Unity
      - persist_to_workspace:
          root: ./src/MasterMemory.Unity/
          paths:
            - ./MasterMemory.Unity.unitypackage
  # .NET Core debug/test, release/push
  build-test:
    executor: dotnet
    steps:
      - checkout
      - run: dotnet build -c Debug
      - run: dotnet test -c Debug --no-build
  build-push:
    executor: dotnet
    steps:
      - checkout
      - run: dotnet build -c Release -p:Version=${CIRCLE_TAG}
      - run: dotnet test -c Release --no-build
      # NuGet pack and push
      - run: dotnet pack ./src/MasterMemory/MasterMemory.csproj -c Release --no-build -p:Version=${CIRCLE_TAG}
      - run: dotnet pack ./src/MasterMemory.Annotations/MasterMemory.Annotations.csproj -c Release --no-build -p:Version=${CIRCLE_TAG}
      - run: dotnet pack ./src/MasterMemory.Generator/MasterMemory.Generator.csproj -c Release --no-build -p:Version=${CIRCLE_TAG}
      - run: dotnet pack ./src/MasterMemory.MSBuild.Tasks/MasterMemory.MSBuild.Tasks.csproj -c Release --no-build -p:Version=${CIRCLE_TAG}
      - run: dotnet nuget push ./src/MasterMemory/bin/Release/MasterMemory.${CIRCLE_TAG}.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
      - run: dotnet nuget push ./src/MasterMemory.Annotations/bin/Release/MasterMemory.Annotations.${CIRCLE_TAG}.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
      - run: dotnet nuget push ./src/MasterMemory.Generator/bin/Release/MasterMemory.Generator.${CIRCLE_TAG}.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
      - run: dotnet nuget push ./src/MasterMemory.MSBuild.Tasks/bin/Release/MasterMemory.MSBuild.Tasks.${CIRCLE_TAG}.nupkg -s https://www.nuget.org/api/v2/package -k ${NUGET_KEY}
  # self-contained single-file codegen
  build-codegen:
    executor: dotnet
    steps:
      - checkout
      - run: dotnet publish ./src/MasterMemory.Generator/ -c Release -o ./MasterMemory.Generator/win-x64 -r win-x64 -p:CIBuild=true
      - run: dotnet publish ./src/MasterMemory.Generator/ -c Release -o ./MasterMemory.Generator/linux-x64 -r linux-x64 -p:CIBuild=true
      - run: dotnet publish ./src/MasterMemory.Generator/ -c Release -o ./MasterMemory.Generator/osx-x64 -r osx-x64 -p:CIBuild=true
      - run: apt update && apt install zip -y
      - run: zip -r MasterMemory.Generator.zip ./MasterMemory.Generator
      - persist_to_workspace:
          root: .
          paths:
            - ./MasterMemory.Generator.zip
  # upload to github by ghr
  upload-github:
    executor: go
    steps:
      - attach_workspace:
          at: .
      - run: go get github.com/tcnksm/ghr
      - run: ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} ${CIRCLE_TAG} .
      - store_artifacts:
          path: MasterMemory.Generator.zip
          destination: MasterMemory.Generator.zip
      - store_artifacts:
          path: MasterMemory.Unity.unitypackage
          destination: MasterMemory.Unity.unitypackage
workflows:
  version: 2
  build-and-push:
    jobs:
      - build-unity:
          unity_version: 2019.1.2f1
          unity_license: ${UNITY_LICENSE_2019_1}
          filters:
            tags:
              only: /.*/
      - build-test:
          filters:
            tags:
              only: /.*/
      - build-push:
          context: cysharp-nuget
          filters:
            tags:
              only: /^\d\.\d\.\d.*/
            branches:
              ignore: /.*/
      - build-codegen:
          filters:
            tags:
              only: /^\d\.\d\.\d.*/
            branches:
              ignore: /.*/
      - upload-github:
          requires:
            - build-unity
            - build-codegen
          filters:
            tags:
              only: /^\d\.\d\.\d.*/
            branches:
              ignore: /.*/
